var documenterSearchIndex = {"docs":
[{"location":"api.html","page":"API","title":"API","text":"CurrentModule = CTDirect ","category":"page"},{"location":"api.html","page":"API","title":"API","text":"Pages = [\"api.md\"]","category":"page"},{"location":"api.html#API","page":"API","title":"API","text":"","category":"section"},{"location":"api.html","page":"API","title":"API","text":"This page is a dump of all the docstrings found in the code. ","category":"page"},{"location":"api.html","page":"API","title":"API","text":"Modules = [CTDirect]\nOrder = [:module, :type, :function, :macro]","category":"page"},{"location":"api.html#CTDirect.solve-Tuple{CTBase.OptimalControlModel, Vararg{Any}}","page":"API","title":"CTDirect.solve","text":"solve(\n    ocp::CTBase.OptimalControlModel,\n    description...;\n    grid_size,\n    print_level,\n    mu_strategy,\n    display,\n    init,\n    kwargs...\n) -> CTBase.OptimalControlSolution\n\n\nSolve the optimal control problem\n\nInput :  ocp : functional description of the optimal control problem (cf. ocp.jl) N   : number of time steps for the discretization       Int\n\nOutput sol : solution of the discretized problem       ...\n\njulia> using CTDirect\njulia> using CTProblems\njulia> ocp =  Problem((:integrator, :dim2, :energy)\njulia> solve(ocp)\n\n\n\n\n\n","category":"method"},{"location":"index.html#CTDirect.jl","page":"Introduction","title":"CTDirect.jl","text":"","category":"section"},{"location":"index.html#Overview","page":"Introduction","title":"Overview","text":"","category":"section"},{"location":"index.html","page":"Introduction","title":"Introduction","text":"This package is ...","category":"page"}]
}
