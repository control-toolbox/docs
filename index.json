<<<<<<< HEAD
[{"id":3,"pagetitle":"Introduction","title":"Introduction to the OptimalControl.jl package","ref":"/CTDocs.jl/optimalcontrol/stable/#Introduction-to-the-OptimalControl.jl-package","content":" Introduction to the OptimalControl.jl package The  OptimalControl.jl  package is part of the  control-toolbox ecosystem . It aims to provide tools to solve optimal control problems by direct and indirect methods. An optimal control problem can be described as minimising the cost functional \\[g(t_0, x(t_0), t_f, x(t_f)) + \\int_{t_0}^{t_f} f^{0}(t, x(t), u(t))~\\mathrm{d}t\\] where the state  $x$  and the control  $u$  are functions subject, for  $t \\in [t_0, t_f]$ , to the differential constraint \\[   \\dot{x}(t) = f(t, x(t), u(t))\\] and other constraints such as \\[\\begin{array}{llcll}\n~\\xi_l  &\\le& \\xi(t, u(t))        &\\le& \\xi_u, \\\\\n\\eta_l &\\le& \\eta(t, x(t))       &\\le& \\eta_u, \\\\\n\\psi_l &\\le& \\psi(t, x(t), u(t)) &\\le& \\psi_u, \\\\\n\\phi_l &\\le& \\phi(t_0, x(t_0), t_f, x(t_f)) &\\le& \\phi_u.\n\\end{array}\\] Contents. Introduction to the OptimalControl.jl package Installation Basic usage API"},{"id":4,"pagetitle":"Introduction","title":"Installation","ref":"/CTDocs.jl/optimalcontrol/stable/#Installation","content":" Installation To install a package from the control-toolbox ecosystem, please visit the  installation page ."},{"id":5,"pagetitle":"Introduction","title":"Basic usage","ref":"/CTDocs.jl/optimalcontrol/stable/#Basic-usage","content":" Basic usage Consider we want to minimise the cost functional \\[    \\frac{1}{2}\\int_{0}^{1} u^2(t) \\, \\mathrm{d}t\\] subject to the dynamical constraints for  $t \\in [0, 1]$ \\[    \\dot x_1(t) = x_2(t), \\quad \\dot x_2(t) = u(t) \\in \\mathbb{R},\\] and the limit conditions \\[    x(0) = (-1, 0), \\quad x(1) = (0, 0).\\] First, we need to import the  OptimalControl.jl  package: using OptimalControl Then, we can define the problem ocp = Model()                                    # the model for the problem definition\n\nstate!(ocp, 2)                                   # dimension of the state\ncontrol!(ocp, 1)                                 # dimension of the control\ntime!(ocp, [0, 1])                               # time interval\n\nobjective!(ocp, :lagrange, (x, u) -> 0.5u^2)     # objective\n\nA = [ 0 1\n      0 0 ]\nB = [ 0\n      1 ]\ndynamics!(ocp, (x, u) -> A*x + B*u) # dynamics\n\nconstraint!(ocp, :initial, [-1, 0])              # initial condition\nconstraint!(ocp, :final,   [0, 0])               # final condition Solve it sol = solve(ocp) \nMethod = (:direct, :adnlp, :ipopt)\nThis is Ipopt version 3.14.12, running with linear solver MUMPS 5.5.1.\n\nNumber of nonzeros in equality constraint Jacobian...:     1205\nNumber of nonzeros in inequality constraint Jacobian.:        0\nNumber of nonzeros in Lagrangian Hessian.............:    81810\n\nTotal number of variables............................:      404\n                     variables with only lower bounds:        0\n                variables with lower and upper bounds:        0\n                     variables with only upper bounds:        0\nTotal number of equality constraints.................:      305\nTotal number of inequality constraints...............:        0\n        inequality constraints with only lower bounds:        0\n   inequality constraints with lower and upper bounds:        0\n        inequality constraints with only upper bounds:        0\n\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n   0  1.0000000e-01 1.10e+00 6.73e-14   0.0 0.00e+00    -  0.00e+00 0.00e+00   0\n   1 -5.0000000e-03 1.81e-01 5.02e-14 -11.0 6.04e+00    -  1.00e+00 1.00e+00h  1\n   2  6.0023829e+00 8.88e-16 3.55e-15 -11.0 6.01e+00    -  1.00e+00 1.00e+00h  1\n\nNumber of Iterations....: 2\n\n                                   (scaled)                 (unscaled)\nObjective...............:   6.0023829460295746e+00    6.0023829460295746e+00\nDual infeasibility......:   3.5527136788005009e-15    3.5527136788005009e-15\nConstraint violation....:   8.8817841970012523e-16    8.8817841970012523e-16\nVariable bound violation:   0.0000000000000000e+00    0.0000000000000000e+00\nComplementarity.........:   0.0000000000000000e+00    0.0000000000000000e+00\nOverall NLP error.......:   3.5527136788005009e-15    3.5527136788005009e-15\n\n\nNumber of objective function evaluations             = 3\nNumber of objective gradient evaluations             = 3\nNumber of equality constraint evaluations            = 3\nNumber of inequality constraint evaluations          = 0\nNumber of equality constraint Jacobian evaluations   = 3\nNumber of inequality constraint Jacobian evaluations = 0\nNumber of Lagrangian Hessian evaluations             = 2\nTotal seconds in IPOPT                               = 28.822\n\nEXIT: Optimal Solution Found. and plot the solution plot(sol, size=(700, 700))"},{"id":8,"pagetitle":"Introduction","title":"CTBase.jl","ref":"/CTDocs.jl/ctbase/stable/#CTBase.jl","content":" CTBase.jl The  CTBase.jl  package is part of the  control-toolbox ecosystem . Install To install a package from the control-toolbox ecosystem,  please visit the  installation page . You may find in this package, some tools to: modelise an optimal control problem (see  OptimalControlModel ) from an abstract point of view (see  @def  from  Parser ) or from a functional point of view (see  Model ). print an optimal control problem: see  Print . plot a solution (see  OptimalControlSolution ) of an optimal control problem: see  Plot . compute  Lie brackets ,  Poisson brackets  and some other tools from  differential geometry : see  Differential geometry . manipulate tuples of symbols: see  Description . You may find the  imported modules and exported names  but also the different types of  exceptions  and  functions  specific to the control-toolbox ecosystem."},{"id":11,"pagetitle":"Introduction","title":"CTFlows.jl","ref":"/CTDocs.jl/ctflows/stable/#CTFlows.jl","content":" CTFlows.jl"},{"id":12,"pagetitle":"Introduction","title":"Overview","ref":"/CTDocs.jl/ctflows/stable/#Overview","content":" Overview This package is ..."},{"id":15,"pagetitle":"Introduction","title":"CTProblems.jl","ref":"/CTDocs.jl/ctproblems/stable/#introduction","content":" CTProblems.jl The  CTProblems.jl  package is part of the  control-toolbox ecosystem . Install To install a package from the control-toolbox ecosystem,  please visit the  installation page . This package provides a  list of optimal control problems . Each problem is composed of a short title, a model and the solution. You can get access to any problem by a simple  Description , that is a tuple of (Julia) symbols. For instance, to get the energy minimisation exponential problem, simply using CTProblems\nprob = Problem(:exponential, :energy) title           = simple exponential - energy min\nmodel    (Type) = CTBase.OptimalControlModel{CTBase.Autonomous, CTBase.Fixed}\nsolution (Type) = CTBase.OptimalControlSolution Note In the example above, we have given a partial description to the function  Problem .  The complete description of this problem is (:exponential, :energy, :x_dim_1, :u_dim_1, :lagrange) Warning If you give a partial description, then, if several complete descriptions contains the partial one, then, only the problem with the highest priority is returned. The higher in the list, the higher is the priority. See the  list of descriptions  to check the priorities. Once you have selected a problem, you can get access to its title: prob.title \"simple exponential - energy min\" Its model is given by prob.model t ∈ [t0, tf], time\nx ∈ R, state\nu ∈ R, control\nx(t0) == x0, initial_con\nx(tf) == xf, final_con\nẋ(t) == -(x(t)) + u(t)\n∫(0.5 * u(t) ^ 2) → min\n And you can plot the solution. plot(prob.solution, size=(700, 500))"},{"id":18,"pagetitle":"Introduction","title":"CTDirect.jl","ref":"/CTDocs.jl/ctdirect/stable/#CTDirect.jl","content":" CTDirect.jl"},{"id":19,"pagetitle":"Introduction","title":"Overview","ref":"/CTDocs.jl/ctdirect/stable/#Overview","content":" Overview This package is ..."},{"id":22,"pagetitle":"Introduction","title":"CTDirectShooting.jl","ref":"/CTDocs.jl/ctdirectshooting/stable/#CTDirectShooting.jl","content":" CTDirectShooting.jl The  CTProblems.jl  package is part of the  control-toolbox ecosystem . Install To install a package from the control-toolbox ecosystem,  please visit the  installation page . This package is under development."}]
=======
[{"id":3,"pagetitle":"Introduction","title":"Introduction to the OptimalControl.jl package","ref":"/optimalcontrol/stable/#Introduction-to-the-OptimalControl.jl-package","content":" Introduction to the OptimalControl.jl package The  OptimalControl.jl  package is part of the  control-toolbox ecosystem . It aims to provide tools to solve optimal control problems by direct and indirect methods. An optimal control problem can be described as minimising the cost functional \\[g(t_0, x(t_0), t_f, x(t_f)) + \\int_{t_0}^{t_f} f^{0}(t, x(t), u(t))~\\mathrm{d}t\\] where the state  $x$  and the control  $u$  are functions subject, for  $t \\in [t_0, t_f]$ , to the differential constraint \\[   \\dot{x}(t) = f(t, x(t), u(t))\\] and other constraints such as \\[\\begin{array}{llcll}\n~\\xi_l  &\\le& \\xi(t, u(t))        &\\le& \\xi_u, \\\\\n\\eta_l &\\le& \\eta(t, x(t))       &\\le& \\eta_u, \\\\\n\\psi_l &\\le& \\psi(t, x(t), u(t)) &\\le& \\psi_u, \\\\\n\\phi_l &\\le& \\phi(t_0, x(t_0), t_f, x(t_f)) &\\le& \\phi_u.\n\\end{array}\\] Contents. Introduction to the OptimalControl.jl package Installation Basic usage API"},{"id":4,"pagetitle":"Introduction","title":"Installation","ref":"/optimalcontrol/stable/#Installation","content":" Installation To install a package from the control-toolbox ecosystem, please visit the  installation page ."},{"id":5,"pagetitle":"Introduction","title":"Basic usage","ref":"/optimalcontrol/stable/#Basic-usage","content":" Basic usage Consider we want to minimise the cost functional \\[    \\frac{1}{2}\\int_{0}^{1} u^2(t) \\, \\mathrm{d}t\\] subject to the dynamical constraints for  $t \\in [0, 1]$ \\[    \\dot x_1(t) = x_2(t), \\quad \\dot x_2(t) = u(t) \\in \\mathbb{R},\\] and the limit conditions \\[    x(0) = (-1, 0), \\quad x(1) = (0, 0).\\] First, we need to import the  OptimalControl.jl  package: using OptimalControl Then, we can define the problem ocp = Model()                                    # the model for the problem definition\n\nstate!(ocp, 2)                                   # dimension of the state\ncontrol!(ocp, 1)                                 # dimension of the control\ntime!(ocp, [0, 1])                               # time interval\n\nobjective!(ocp, :lagrange, (x, u) -> 0.5u^2)     # objective\n\nA = [ 0 1\n      0 0 ]\nB = [ 0\n      1 ]\ndynamics!(ocp, (x, u) -> A*x + B*u) # dynamics\n\nconstraint!(ocp, :initial, [-1, 0])              # initial condition\nconstraint!(ocp, :final,   [0, 0])               # final condition Solve it sol = solve(ocp) \nMethod = (:direct, :adnlp, :ipopt)\nThis is Ipopt version 3.14.12, running with linear solver MUMPS 5.5.1.\n\nNumber of nonzeros in equality constraint Jacobian...:     1205\nNumber of nonzeros in inequality constraint Jacobian.:        0\nNumber of nonzeros in Lagrangian Hessian.............:    81810\n\nTotal number of variables............................:      404\n                     variables with only lower bounds:        0\n                variables with lower and upper bounds:        0\n                     variables with only upper bounds:        0\nTotal number of equality constraints.................:      305\nTotal number of inequality constraints...............:        0\n        inequality constraints with only lower bounds:        0\n   inequality constraints with lower and upper bounds:        0\n        inequality constraints with only upper bounds:        0\n\niter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n   0  1.0000000e-01 1.10e+00 6.73e-14   0.0 0.00e+00    -  0.00e+00 0.00e+00   0\n   1 -5.0000000e-03 1.81e-01 5.02e-14 -11.0 6.04e+00    -  1.00e+00 1.00e+00h  1\n   2  6.0023829e+00 8.88e-16 3.55e-15 -11.0 6.01e+00    -  1.00e+00 1.00e+00h  1\n\nNumber of Iterations....: 2\n\n                                   (scaled)                 (unscaled)\nObjective...............:   6.0023829460295746e+00    6.0023829460295746e+00\nDual infeasibility......:   3.5527136788005009e-15    3.5527136788005009e-15\nConstraint violation....:   8.8817841970012523e-16    8.8817841970012523e-16\nVariable bound violation:   0.0000000000000000e+00    0.0000000000000000e+00\nComplementarity.........:   0.0000000000000000e+00    0.0000000000000000e+00\nOverall NLP error.......:   3.5527136788005009e-15    3.5527136788005009e-15\n\n\nNumber of objective function evaluations             = 3\nNumber of objective gradient evaluations             = 3\nNumber of equality constraint evaluations            = 3\nNumber of inequality constraint evaluations          = 0\nNumber of equality constraint Jacobian evaluations   = 3\nNumber of inequality constraint Jacobian evaluations = 0\nNumber of Lagrangian Hessian evaluations             = 2\nTotal seconds in IPOPT                               = 28.822\n\nEXIT: Optimal Solution Found. and plot the solution plot(sol, size=(700, 700))"},{"id":8,"pagetitle":"Introduction","title":"CTBase.jl","ref":"/ctbase/stable/#CTBase.jl","content":" CTBase.jl The  CTBase.jl  package is part of the  control-toolbox ecosystem . Install To install a package from the control-toolbox ecosystem,  please visit the  installation page . You may find in this package, some tools to: modelise an optimal control problem (see  OptimalControlModel ) from an abstract point of view (see  @def  from  Parser ) or from a functional point of view (see  Model ). print an optimal control problem: see  Print . plot a solution (see  OptimalControlSolution ) of an optimal control problem: see  Plot . compute  Lie brackets ,  Poisson brackets  and some other tools from  differential geometry : see  Differential geometry . manipulate tuples of symbols: see  Description . You may find the  imported modules and exported names  but also the different types of  exceptions  and  functions  specific to the control-toolbox ecosystem."},{"id":11,"pagetitle":"Introduction","title":"CTFlows.jl","ref":"/ctflows/stable/#CTFlows.jl","content":" CTFlows.jl"},{"id":12,"pagetitle":"Introduction","title":"Overview","ref":"/ctflows/stable/#Overview","content":" Overview This package is ..."},{"id":15,"pagetitle":"Introduction","title":"Introduction to the CTProblems.jl package","ref":"/ctproblems/stable/#introduction","content":" Introduction to the CTProblems.jl package The  CTProblems.jl  package is part of the  control-toolbox ecosystem . To install this package or another from the control-toolbox ecosystem, please visit the  installation page . The  CTProblems.jl  package provides a  list of optimal control problems . Each problem is composed of a short title, a model and the solution. You can get access to any problem by a simple  description , that is a  Tuple  of  Symbol . For instance, to get the energy minimisation exponential problem, simply using CTProblems\nprob = Problem(:exponential, :energy) title           = simple exponential - energy min\nmodel    (Type) = CTBase.OptimalControlModel{CTBase.Autonomous, CTBase.Fixed}\nsolution (Type) = CTBase.OptimalControlSolution Note In the example above, we have given a partial description to the function  Problem . The complete description of this problem is (:exponential, :energy, :x_dim_1, :u_dim_1, :lagrange) Warning If you give a partial description, then, if several complete descriptions contains the partial one, then, only the problem with the highest priority is returned. The higher in the list, the higher is the priority. See the  list of descriptions  to check the priorities. Once you have selected a problem, you can get access to its title: prob.title \"simple exponential - energy min\" Its model is given by prob.model \nt ∈ [t0, tf], time\nx ∈ R, state\nu ∈ R, control\nx(t0) == x0, initial_con\nx(tf) == xf, final_con\nẋ(t) == -(x(t)) + u(t)\n∫(0.5 * u(t) ^ 2) → min\n And you can plot the solution. plot(prob.solution, size=(700, 500))"},{"id":18,"pagetitle":"Introduction","title":"CTDirect.jl","ref":"/ctdirect/stable/#CTDirect.jl","content":" CTDirect.jl"},{"id":19,"pagetitle":"Introduction","title":"Overview","ref":"/ctdirect/stable/#Overview","content":" Overview This package is ..."}]
>>>>>>> 23d6fe3249a6924c40d4c52bccd82f95b5ee08c3
