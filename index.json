[{"id":3,"pagetitle":"Introduction","title":"OptimalControl.jl","ref":"/optimalcontrol/stable/#OptimalControl.jl","content":" OptimalControl.jl The  OptimalControl.jl  package aims to provide tools to solve optimal control problems by direct and indirect methods. It is part of the  control-toolbox ecosystem : Install and documentation To install a package from the control-toolbox ecosystem,  please visit the  installation page . The documentation is accessible from the main menu. An optimal control problem with fixed initial and final times can be described as minimising the cost functional \\[g(x(t_0), x(t_f)) + \\int_{t_0}^{t_f} f^{0}(t, x(t), u(t))~\\mathrm{d}t\\] where the state  $x$  and the control  $u$  are functions subject, for  $t \\in [t_0, t_f]$ , to the differential constraint \\[   \\dot{x}(t) = f(t, x(t), u(t))\\] and other constraints such as \\[\\begin{array}{llcll}\n~\\xi_l  &\\le& \\xi(t, u(t))        &\\le& \\xi_u, \\\\\n\\eta_l &\\le& \\eta(t, x(t))       &\\le& \\eta_u, \\\\\n\\psi_l &\\le& \\psi(t, x(t), u(t)) &\\le& \\psi_u, \\\\\n\\phi_l &\\le& \\phi(t_0, x(t_0), t_f, x(t_f)) &\\le& \\phi_u.\n\\end{array}\\] See our tutorials to get started solving optimal control problems: Basic example : a simple smooth optimal control problem solved by the direct method. Advanced example : the  Goddard problem  solved by direct and indirect methods."},{"id":6,"pagetitle":"Introduction","title":"CTBase.jl","ref":"/ctbase/stable/#CTBase.jl","content":" CTBase.jl The  CTBase.jl  package is part of the  control-toolbox ecosystem . Install To install a package from the control-toolbox ecosystem,  please visit the  installation page . You may find in this package, some tools to: modelise an optimal control problem (see  OptimalControlModel ) from an abstract point of view (see  @def  from  Parser ) or from a functional point of view (see  Model ). print an optimal control problem: see  Print . plot a solution (see  OptimalControlSolution ) of an optimal control problem: see  Plot . compute  Lie brackets ,  Poisson brackets  and some other tools from  differential geometry : see  Differential geometry . manipulate tuples of symbols: see  Description . You may find the  imported modules and exported names  but also the different types of  exceptions  and  functions  specific to the control-toolbox ecosystem."},{"id":9,"pagetitle":"Introduction","title":"CTDirect.jl","ref":"/ctdirect/stable/#CTDirect.jl","content":" CTDirect.jl The  CTDirect.jl  package is part of the  control-toolbox ecosystem . Install To install a package from the control-toolbox ecosystem,  please visit the  installation page . An optimal control problem with fixed initial and final times, denoted (OCP), can be described as minimising the cost functional \\[g(x(t_0), x(t_f)) + \\int_{t_0}^{t_f} f^{0}(t, x(t), u(t))~\\mathrm{d}t\\] where the state  $x$  and the control  $u$  are functions, subject, for  $t \\in [t_0, t_f]$ , to the differential constraint \\[   \\dot{x}(t) = f(t, x(t), u(t)),\\] and other constraints such as \\[\\begin{array}{llcll}\n\\psi_l &\\le& \\psi(t, x(t), u(t)) &\\le& \\psi_u, \\\\\n\\phi_l &\\le& \\phi(x(t_0), x(t_f)) &\\le& \\phi_u.\n\\end{array}\\] The so-called direct approach transforms the infinite dimensional optimal control problem (OCP) into a finite dimensional optimization problem (NLP). This is done by a discretization in time applied to the state and control variables, as well as the dynamics equation. These methods are usually less precise than indirect methods based on  Pontryagin’s Maximum Principle , but more robust with respect to the initialization. Also, they are more straightforward to apply, hence their wide use in industrial applications. We refer the reader to for instance [1]  and  [2]  for more details on direct transcription methods and NLP algorithms. Summary of the time discretization: \\[\\begin{array}{lcl}\nt \\in [t_0,t_f]   & \\to & \\{t_0, \\ldots, t_N=t_f\\}\\\\[0.2em]\nx(\\cdot),\\, u(\\cdot) & \\to & X=\\{x_0, \\ldots, x_N, u_0, \\ldots, u_N\\} \\\\[1em]\n\\hline\n\\\\\n\\text{criterion} & \\to & \\min\\ g(x_0, x_N) \\\\[0.2em]\n\\text{dynamics}  & \\to & x_{i+i} = x_i + (t_{i+i} - t_i)\\, f(t_i, x_i, u_i) ~~ \\text{(Euler)}\\\\[0.2em]\n\\text{path constraints} &\\to& \\psi_l \\le \\psi(t_i, x_i, u_i) \\le \\psi_u \\\\[0.2em]\n\\text{limit conditions} &\\to& \\phi_l \\le \\phi(x_0, x_N) \\le \\phi_u\n\\end{array}\\] We therefore obtain a nonlinear programming problem on the discretized state and control variables of the general form: \\[(NLP)\\quad \\left\\{\n\\begin{array}{lr}\n\\min \\ F(X) \\\\\nLB \\le C(X) \\le UB\n\\end{array}\n\\right.\\] We use packages from  JuliaSmoothOptimizers  to solve the (NLP) problem. 1 J. T. Betts. Practical methods for optimal control using nonlinear programming. Society for Industrial and Applied Mathematics (SIAM), Philadelphia, PA, 2001. 2 J. Nocedal and S.J. Wright. Numerical optimization. Springer-Verlag, New York, 1999.****"},{"id":12,"pagetitle":"Introduction","title":"CTDirectShooting.jl","ref":"/ctdirectshooting/stable/#CTDirectShooting.jl","content":" CTDirectShooting.jl The  CTProblems.jl  package is part of the  control-toolbox ecosystem . Install To install a package from the control-toolbox ecosystem,  please visit the  installation page . This package is under development."},{"id":15,"pagetitle":"Introduction","title":"CTFlows.jl","ref":"/ctflows/stable/#CTFlows.jl","content":" CTFlows.jl The  CTFlows.jl  package is part of the  control-toolbox ecosystem . Install To install a package from the control-toolbox ecosystem,  please visit the  installation page . It aims to provide tools to solve  mathematical flows  of vector fields, and in particular  Hamiltonian vector fields  directly from the definition of the Hamiltonian, using automatic differentiation to construct the assiocated Hamiltonian vector field. The flow is then computed thanks to  DifferentialEquations.jl  package."},{"id":18,"pagetitle":"Introduction","title":"CTProblems.jl","ref":"/ctproblems/stable/#introduction","content":" CTProblems.jl The  CTProblems.jl  package is part of the  control-toolbox ecosystem . Install To install a package from the control-toolbox ecosystem,  please visit the  installation page . This package provides a  list of optimal control problems . Each problem is composed of a short title, a model and the solution. You can get access to any problem by a simple  Description , that is a tuple of (Julia) symbols. For instance, to get the energy minimisation exponential problem, simply using CTProblems\nprob = Problem(:exponential, :energy) title           = simple exponential - energy min\nmodel    (Type) = CTBase.OptimalControlModel{CTBase.Autonomous, CTBase.Fixed}\nsolution (Type) = CTBase.OptimalControlSolution Note In the example above, we have given a partial description to the function  Problem .  The complete description of this problem is (:exponential, :energy, :x_dim_1, :u_dim_1, :lagrange) Warning If you give a partial description, then, if several complete descriptions contains the partial one, then, only the problem with the highest priority is returned. The higher in the list, the higher is the priority. See the  list of descriptions  to check the priorities. Once you have selected a problem, you can get access to its title: prob.title \"simple exponential - energy min\" Its model is given by prob.model t ∈ [t0, tf], time\nx ∈ R, state\nu ∈ R, control\nx(t0) == x0, initial_con\nx(tf) == xf, final_con\nẋ(t) == -(x(t)) + u(t)\n∫(0.5 * u(t) ^ 2) → min\n And you can plot the solution. plot(prob.solution, size=(700, 500))"}]